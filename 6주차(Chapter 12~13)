
# Chapter 12. 함수형 반복

앞선 챕터에서 나온 리팩터링 기법을 적용하여 `map()` 함수를 만드는 과정을 살펴보자.

```js
function emailsForCustomers(customers, goods, bests) {
  var emails = [];
  forEach(customers, function(customer) {
    var email = emailForCustomer(customer, goods, bests);
    emails.push(email);
  });
  return emails;
}

function emailsForCustomers(customers, goods, bests) {
  return map(customers, function(customer) {
    return emailForCustomer(customer, goods, bests);
  });
}

function map(array, f) {
  var newArray = [];
  forEach(array, function(element) {
    newArray.push(f(element));
  });
  return newArray;
}
```

기존 함수에서의 본문 즉 메인 로직을 콜백 함수로 빼고 `map()`에 전달한다.

## 함수형 도구: map()

`map()`은 어떤 값을 가지고 있는 배열을 다른 값을 가지고 있는 배열로 변환할 수 있게 해준다.

다른 값으로 바꾸는 로직은 콜백 함수로 넘겨주는 것이다.

`map()`에 넘기는 함수는 계산일 때 가장 사용하기 쉽다.

## 함수를 전달하는 세 가지 방법

1. 전역으로 정의하기
2. 지역적으로 정의하기
3. 인라인으로 정의하기


## 함수형 도구: filter()
배열과 함수를 받아서 콜백 함수 내에 있는 조건에 충족되는 항목을 가지는 배열을 반환한다.

```js
function filter(array, f) {
  var newArray = [];
  forEach(array, function(element) {
    if (f(element)) 
      newArray.push(element);
  });
  return newArray;
}
```


>참고
>`true`, `false` 를 반환하는 함수를 **술어(predicate)**라고 한다.

## 함수형 도구: reduce()
`reduce()`는 배열을 순회하면서 값을 누적한다. 값을 누적하는 것은 추상적인 개념이다.

```js
function reduce(array, init, f) {
  var accum = init;
  forEach(array, function(element) {
    accum = f(accum, element); // `f` 에서 새로운 누적값 반환
  });
  return accum;
}
```


## reduce()로 map(), filter() 함수 만들기

### map()
```js
const map = (arr, callback) => {
	return reduce(arr, [], function(accum, curValue) {
		accum.push(callback(curValue))
		return accum
	})
}
```

### filter()
```js
const filter = (arr, callback) => {
	return reduce(arr, [], function(accum, curValue) {
		if(callback(curValue)){
			accum.push(curValue)
		}
		return accum
	})
}
```

---


# Chapter 13. 함수형 도구 체이닝

1. 우수 고객(3개 이상 구매)을 거른다.
2. 우수 고객이 구매한 가격 중 가장 비싼 가격 데이터로 변경한다.

```js
function maxKey(array, init, f) {
  return reduce(array, init, function(biggestSoFar, element) {
    if (f(biggestSoFar) > f(element)) {
      return biggestSoFar;
    } else {
      return element;
    }
  });
}


function biggestPurchasesBestCustomers(customers) {
  var bestCustomers = filter(customers, function (customer) {
    return customer.purchases.length >= 3;
  }); // 1단계

  var biggestPurchases = map(bestCustomers, function (customer) {
    return maxKey(
      customer.purchases,
      { total: 0 },
      function (purchase) {
        return purchase.total;
      }
    );
  });

  return biggestPurchases;
}
```


## 체인을 명확하게 만들기

체인을 명확하게 만들어 가독성을 높이기 위해서 다음 2가지 방법이 있다.

1. **단계에 이름 붙이기**

특정 로직에 대해 명시적으로 함수로 빼고 이름을 붙여주면 어떤 로직을 수행하는 지 쉽게 파악할 수 있을 것이다.
```js
function biggestPurchasesBestCustomers(customers) {
  var bestCustomers = selectBestCustomers(customers); // 1단계
  var biggestPurchases = getBiggestPurchases(bestCustomers); // 2단계
  return biggestPurchases;
}

function selectBestCustomers(customers) {
  return filter(customers, function (customer) {
    return customer.purchases.length >= 3;
  });
}

function getBiggestPurchases(customers) {
  return map(customers, getBiggestPurchase);
}

function getBiggestPurchase(customer) {
  return maxKey(
    customer.purchases,
    { total: 0 },
    function (purchase) {
      return purchase.total;
    }
  );
}
```


2. **콜백에 이름 붙이기**

앞서 본 방법과 동일하게 명시적으로 콜백 함수에 이름을 붙여준다.

```js
function biggestPurchasesBestCustomers(customers) {
  var bestCustomers = filter(customers, isGoodCustomer); // 1단계
  var biggestPurchases = map(bestCustomers, getBiggestPurchase); // 2단계
  return biggestPurchases;
}

function isGoodCustomer(customer) {
  return customer.purchases.length >= 3;
}

function getBiggestPurchase(customer) {
  return maxKey(customer.purchases, { total: 0 }, getPurchaseTotal);
}

function getPurchaseTotal(purchase) {
  return purchase.total;
}
```


> 위 2가지 방법을 모두 시도해보고 어떤 것이 더 좋은 지 비교하고 결정하자.

-> 어떤 방법이 더 나은지?
